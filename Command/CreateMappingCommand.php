<?php
namespace AlexeyKupershtokh\ThriftDoctrineBundle\Command;

use AlexeyKupershtokh\ThriftDoctrineBundle\Dumper\Dumper;
use AlexeyKupershtokh\ThriftDoctrineBundle\Reader\Reader;
use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
use Symfony\Component\ClassLoader\ClassMapGenerator;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Finder\SplFileInfo;

class CreateMappingCommand extends ContainerAwareCommand
{
    protected function configure()
    {
        $this->setName('thrift-doctrine:convert-mapping')
            ->setDescription('Generate Doctrine ODM mappings for classes generated by Apache Thrift');
        $this->addOption('overwrite', '', InputOption::VALUE_NONE)
            ->setDescription('Remove all mappings from the target dir prior to generation');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $targetDir = 'src/EpicBattlerBundle/Resources/config/doctrine/mapping/';
        if ($input->getOption('overwrite')) {
            $finder = new Finder();
            $finder->files()->in($targetDir);
            foreach ($finder as $file) {
                /** @var SplFileInfo $file */
                unlink($file);
            }
        }

        $r = new Reader();
        $d = new Dumper();
        $kernel = $this->getContainer()->get('kernel');
        $path = $kernel->locateResource('@EpicBattlerBundle/thrift/EpicBattlerBundle');
        $classes = array_keys(ClassMapGenerator::createMap($path));
        foreach ($classes as $class) {
            try {
                $cmi = $r->read($class);
                $subNsClass = str_replace('EpicBattlerBundle\\', "", $class);
                $dottedSubNsClass = str_replace('\\', '.', $subNsClass);
                $ymlPath = 'src/EpicBattlerBundle/Resources/config/doctrine/mapping/'.$dottedSubNsClass.'.mongodb.yml';
                file_put_contents($ymlPath, $d->dump($cmi));
                $output->writeln($class);
            } catch (\Exception $e) {
                $output->writeln('<error>' . $e->getMessage() . '</error>');
            }
        }
    }
}
